#The main code of GUI-design.

function [branch_current,branch_voltage,node_voltage,bracurr,bravolt,nodevolt] = analysis(X,w)
% 稳态电路的matlab分析
%********************************************************************************************
%参数录入规则
% 1 规定一个元件为一条支路;
% 2 规定支路电压和电流取关联参考方向，电压源支路电压方向为电源正极指向负极(即取关联方向)，电流源方向与支路电流方向一致；
% 3 电路信息表的编制：
% （1）	规定元件类型用数字表示，按 电导—电阻—电感—电容—独立电流源—独立电压源—压控电压源—压控电流源—流控电压源—流控电流源—互感 依次编号为0-10；
% （2）	若为交流独立源，参数1为有效值，参数2为初相位；
% （3）	对互感元件，参数1为自感系数，参数2为互感系数；若电流从同名端流入，互感系数为正，否则为负；
% （4）	控制支路表示与该支路有磁耦合的线圈支路；
% （5）	无源元件（L，C，M）统一使用阻抗形式录入；
% （6）	参考节点的命名规则为：统一从1开始，默认最大节点为参考节点；
% （7）   表格中无数据处统一用数字0填充；
%   附注：此处用GMRES算法解大型稀疏矩阵
%----------------------------------------------------------------------------------------------------
%获取基本信息
% 稳态电路的matlab分析
%********************************************************************************************
%参数录入规则
% 1 规定一个元件为一条支路;
% 2 规定支路电压和电流取关联参考方向，电压源支路电压方向为电源正极指向负极(即取关联方向)，电流源方向与支路电流方向一致；
% 3 电路信息表的编制：
% （1）	规定元件类型用数字表示，按 电导—电阻—电感—电容—独立电流源—独立电压源—压控电压源—压控电流源—流控电压源—流控电流源—互感 依次编号为0-10；
% （2）	若为交流独立源，参数1为有效值，参数2为初相位；
% （3）	对互感元件，参数1为自感系数，参数2为互感系数；若电流从同名端流入，互感系数为正，否则为负；
% （4）	控制支路表示与该支路有磁耦合的线圈支路；
% （5）	无源元件（L，C，M）统一使用阻抗形式录入；
% （6）	参考节点的命名规则为：统一从1开始，默认最大节点为参考节点；
% （7）   表格中无数据处统一用数字0填充；
%   附注：此处用GMRES算法解大型稀疏矩阵
%----------------------------------------------------------------------------------------------------

    [n,~] = size(X); %n为支路数

    m = max(max(X(:,3)),max(X(:,4)));%m为节点数
    %初始化参数列表
    for k = 1 : n
        for l = 1 : m
            if isnan(X(k,l))
                X(k,l) = 0;
            end
        end
    end
    %---------------------------------------------------------------------------------------------------
    %获取关联矩阵A
    A = zeros(m,n);%建立相应大小的关联矩阵

    for k = 1 : n
       A(X(k,3),k) = 1;
       A(X(k,4),k) = -1;
    end
    A(m,:) = [];
    %---------------------------------------------------------------------------------------------
    %获取矩阵F H Us Is
    %建立F阵
    F = zeros(n);
    %建立H阵
    H = zeros(n);
    %------------------------------------------------------------------------------------------------------
    %建立电源矩阵
    Us_dc = zeros(n,1);%建立直流电压源矩阵
    Is_dc = zeros(n,1);%建立直流电流源矩阵
    Us_ac = zeros(n,1);%建立交流电压源矩阵
    Is_ac = zeros(n,1);%建立交流电流源矩阵
    %------------------------------------------------------------------------------------------------------
    %建立独立直流电压源矩阵
    for k = 1 : n
        if (X(k,2) == 5 && X(k,6) == 0)
            Us_dc(k,1) = X(k,5);
        end
    end
    %*******************************************************************************
    %建立独立直流电流源矩阵
    for k = 1 : n
        if (X(k,2) == 4 && X(k,6) == 0)
            Is_dc(k,1) = X(k,5);
        end
    end
    % ***************************************************************************************
    %建立独立交流电压源矩阵
    for k = 1 : n
        if (X(k,2) == 5 && X(k,6) ~= 0)
            Us_ac(k,1) = X(k,5)*cosd(X(k,6)) + 1i*X(k,5)*sind(X(k,6));
        end
    end
    %********************************************************************************************
    %%建立独立交流电流源矩阵
    for k = 1 :n
        if (X(k,2) == 4 && X(k,6) ~= 0)        
            Is_ac(k,1) = X(k,5)*cosd(X(k,6)) + 1i*X(k,5)*sind(X(k,6));
        end
    end
    %-----------------------------------------------------------------------------------------------------
    %   获取二端元件的参数
    for k = 1 : n
        if X(k,2) == 1 
            F(k,k) = 1;
            H(k,k) = -X(k,5);
        elseif X(k,2) == 2
            F(k,k) = 1;
            H(k,k) = -1i * w * X(k,5);
        elseif X(k,2) == 0
            H(k,k) = -1;
            F(k,k) = X(k,5);
        elseif X(k,2) == 3
            H(k,k) = -1;
            F(k,k) = 1i * w * X(k,5);
        elseif X(k,2) == 4
            F(k,k) = 0;
            H(k,k) = 1;
        elseif X(k,2) == 5
            F(k,k) = 1;
            H(k,k) = 0;
        end
    end
    % 获取二端口元件的参数
    for k = 1 : n
        if X(k,2) == 6
            F(k,k) = 1;
            F(k,X(k,7))  = -X(k,5);
            H(k,k) = 0;
        elseif X(k,2) == 7
            F(k,k) = 0;
            F(k,X(k,7)) = -X(k,5);
            H(k,k) = 1;
        elseif X(k,2) == 8
            F(k,k) = 1;
            H(k,k) = 0;
            H(k,X(k,7)) = -X(k,5);
        elseif X(k,2) == 9
            F(k,k) = 0;
            H(k,k) = 1;
            H(k,X(k,7)) = -X(k,5);
        elseif X(k,2) ==10
            F(k,k) = 1;
            F(X(k,7),X(k,7)) = 1;
            H(k,k) = -1i * w * X(k,5);
            H(k,X(k,7)) = -1i * w * X(k,6);
            H(X(k,7),X(k,7)) = -1i * w * X(X(k,7),5);
            H(X(k,7),k) = -1i * w * X(X(k,7),6);
        end
    end

    F = sparse(F);
    H = sparse(H);
    %------------------------------------------------------------------------------------------------
    %列线性方程组
    T = [zeros(m-1,m-1) zeros(m-1,n) A; -A' eye(n) zeros(n,n); zeros(n,m-1) F H];
    T = sparse(T);
    %Y = [Un;U;Ik];

    W = [zeros(m-1,1);zeros(n,1);Us_dc+Is_dc+Us_ac+Is_ac];
    W = sparse(W);
    %计算稀疏矩阵
    y = gmres_mine(T,W);

    y = full(y);

    node_voltage = zeros(m-1,1);
    branch_voltage = zeros(n,1);
    branch_current = zeros(n,1);

    for k = 1 : m - 1
        node_voltage(k,1) = y(k,1);
    end

    for k = 1 : n
        branch_voltage(k,1) = y(k+m-1,1);
    end

    for k = 1 : n
        branch_current(k,1) = y(k+m-1+n,1);
    end


    %计算模角式
    [a,~] = size(branch_current);%获取电流向量的行数
    [b,~] = size(node_voltage);%获取节点电压向量的行数


    bracurr = zeros(a,2);
    bravolt = zeros(a,2);
    nodevolt = zeros(b,2);

    for k = 1 : a
        bracurr(k,1) = abs(branch_current(k,1));
        bracurr(k,2) = rad2deg(angle(branch_current(k,1)));
    end

    for k = 1 : a
        bravolt(k,1) = abs(branch_voltage(k,1));
        bravolt(k,2) = rad2deg(angle(branch_voltage(k,1)));
    end

    for k = 1 : b
        nodevolt(k,1) = abs(node_voltage(k,1));
        nodevolt(k,2) = rad2deg(angle(node_voltage(k,1)));
    end

%     %精度的处理
%     branch_current(branch_current < 1e-5) = 0;
%     branch_voltage(branch_voltage < 1e-5) = 0;
%     node_voltage(node_voltage< 1e-5) = 0;
%     bracurr(bracurr < 1e-5) = 0;
%     bravolt(bravolt< 1e-5) = 0;
%     nodevolt(nodevolt< 1e-5) = 0;

end
% --- Executes on button press in pushbutton_pinlv.
